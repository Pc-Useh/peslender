//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Boot.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Boot : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Boot()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Boot"",
    ""maps"": [
        {
            ""name"": ""MainBoot"",
            ""id"": ""e252005b-6aa3-45bc-9bd9-3225667d485e"",
            ""actions"": [
                {
                    ""name"": ""BStart"",
                    ""type"": ""Button"",
                    ""id"": ""7d47eecd-13e1-4803-87bb-b28a9ba0cd71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""406731bd-989f-4147-bb7f-31ae46a78077"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8668cac7-fbb9-4072-9a57-123c90f563e8"",
                    ""path"": ""<HID::Ð‰ Twin USB Joystick>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24c2cea1-ab9d-4eea-b39c-fd9658d41f44"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31e13231-bd68-4856-a26c-56694ecbb03b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainBoot
        m_MainBoot = asset.FindActionMap("MainBoot", throwIfNotFound: true);
        m_MainBoot_BStart = m_MainBoot.FindAction("BStart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainBoot
    private readonly InputActionMap m_MainBoot;
    private IMainBootActions m_MainBootActionsCallbackInterface;
    private readonly InputAction m_MainBoot_BStart;
    public struct MainBootActions
    {
        private @Boot m_Wrapper;
        public MainBootActions(@Boot wrapper) { m_Wrapper = wrapper; }
        public InputAction @BStart => m_Wrapper.m_MainBoot_BStart;
        public InputActionMap Get() { return m_Wrapper.m_MainBoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainBootActions set) { return set.Get(); }
        public void SetCallbacks(IMainBootActions instance)
        {
            if (m_Wrapper.m_MainBootActionsCallbackInterface != null)
            {
                @BStart.started -= m_Wrapper.m_MainBootActionsCallbackInterface.OnBStart;
                @BStart.performed -= m_Wrapper.m_MainBootActionsCallbackInterface.OnBStart;
                @BStart.canceled -= m_Wrapper.m_MainBootActionsCallbackInterface.OnBStart;
            }
            m_Wrapper.m_MainBootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BStart.started += instance.OnBStart;
                @BStart.performed += instance.OnBStart;
                @BStart.canceled += instance.OnBStart;
            }
        }
    }
    public MainBootActions @MainBoot => new MainBootActions(this);
    public interface IMainBootActions
    {
        void OnBStart(InputAction.CallbackContext context);
    }
}
